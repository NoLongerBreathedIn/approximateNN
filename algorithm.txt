gpu_thunk add_up_rows(size_t d, size_t n, double *points, double *sums,
                      const gpu_thunk *prevs, gpu_thunk **hold) {
  if(n/2 <= gpu_max_conc_threads())
    return(gpu_queue_group_on_x(prevs, add_rows(d, n, points, sums), n/2, d));
  b = gpu_queue(prevs, add_rows_step_0(d, n, points, sums), n/2, d);
  if(n < 4)
    return(b);
  *hold = h = alloc<gpu_thunk>(floor(lg(n) - 1));
  for(i = 0, m = n >> 1; m >> 1; m >>= 1, i++)
    b = gpu_queue({h[i] = b, gpu_nada}, add_rows_step_n(d, m, sums), m/2, d);
  return(b);
}

gpu_thunk walsh(size_t d, size_t n, double *a,
                const gpu_thunk *prevs, gpu_thunk **hold) {
  if(d == 1)
    return;
  int l = lg(d);
  nth = max(d / 16, 1)
  if(nth <= gpu_max_conc_threads())
    return(gpu_queue_group_on_y(prevs, apply_walsh(l, a), n, nth));
  b = gpu_queue(prevs, apply_walsh_step(l, 0, a), n, nth);
  if(l == 1)
    return(b);
  *hold = h = alloc<gpu_thunk>(l - 1);
  for(i = 1; i < l; i++)
    b = gpu_queue({h[i - 1] = b, gpu_nada}, apply_walsh_step(l, i, a), n, nth);
  return(b);
}

gpu_thunk add_up_cols(size_t d, size_t k, size_t skip, size_t n,
		      double *mat, double *out,
		      const gpu_thunk *prevs, gpu_thunk **hold) {
  if(d/2 <= gpu_max_conc_threads())
    return(gpu_queue_group_on_z(prevs, add_cols(d, k, skip, mat, out),
				n, k - skip, d/2));
  *hold = h = alloc<gpu_thunk>(floor(lg(d)));
  i = 0;
  *h = gpu_queue(prevs, add_cols_step(d, d, k - skip, mat),
		   n, k - skip, d / 2);
  for(l = d / 2; l >> 1; l >>= 1, i++)
    h[i] = gpu_queue({h[i - 1], gpu_nada}, add_cols_step(d, l, k - skip, mat),
		     n, k - skip, l / 2);
  return(gpu_queue({h[i - 1], gpu_nada}, add_cols_fin(d, k, skip, mat, out),
		   n, k - skip));
}

gpu_thunk do_sort(size_t k, size_t n, size_t *along, double *order,
		  const gpu_thunk *prevs, gpu_thunk **hold) {
  lk = ceil(lg(k));
  nth = 1 << max(lk - 4, 0);
  if(nth <= gpu_max_conc_threads())
    return(gpu_queue_group_on_y(prevs, sort_two(k, n, along, order), n, nth);
  *hold = h = alloc<gpu_thunk>(lk * (lk + 1) / 2 - 1);
  b = gpu_queue(prevs, sort_two_step(k, n, 0, 0, along, order), n, nth);
  for(s = 1, i = 0; s < lk; s++)
    for(ss = s; ss >= 0; ss--, i++)
      b = gpu_queue({h[i] = b, gpu_nada},
                    sort_two_step(k, n, s, ss, along, order), n, nth);
  return(b);
}

Starting point:
We have an array, points, that is n by d_long.
We also have save, which is a save structure.

d_max = 1 << ceil(lg(d_long));
d_short = ceil(lg(n / k));
row_sums = alloc<double>((n/2) * d_long);
as = (gpu_thunk *)NULL;
add_up_rows(d_long, n, points, row_sums, NULL, &as);
b = gpu_queue({a, gpu_nada}, divide_by_length(n, row_sums), d_long);
c = gpu_queue({b, gpu_nada}, subtract_off(d_long, points, row_sums),
              n, d_long);
gpu_wait(c);
free(as);
if(save) {
    save->tries = tries;
    save->n = n;
    save->k = k;
    save->d_short = d_short;
    sace->d_long = d_long;
    save->points = points;
    save->row_means = alloc<double>(d_long);
    memcpy(save->row_means, row_sums, sizeof(double) * d_long);
    save->which_par = alloc<size_t *>(tries);
    save->par_maxes = alloc<size_t>(tries);
    save->bases = alloc<double>(tries * d_short * d_long);
}
free(row_sums);
pointers_out = alloc<size_t>(n * k * tries + 1);
dists_out = alloc<double>(n * k * tries + 1);
pfor(i = 0; i < tries; i++) {
    rot_is_before = alloc<size_t>(rots_before * rot_len_before);
    rot_js_before = alloc<size_t>(rots_before * rot_len_before);
    rot_as_before = alloc<double>(rots_before * rot_len_before);
    rot_is_after = alloc<size_t>(rots_after * rot_len_after);
    rot_js_after = alloc<size_t>(rots_after * rot_len_after);
    rot_as_after = alloc<double>(rots_after * rot_len_after);
    perm_before = alloc<size_t>(d_max);
    perm_after_i = alloc<size_t>(d_max);
    for(j = 0; j < rots_before * rot_len_before; j += rot_len_before) {
    	  rand_rot(rot_len_before, d_long, rot_is_before + j,
	           rot_js_before + j, rot_as_before + j);
    }
    for(j = 0; j < rots_after * rot_len_after; j += rot_len_after) {
    	  rand_rot(rot_len_after, d_max, rot_is_after + j,
	           rot_js_after + j, rot_as_after + j);
    }
    rand_perm(perm_before, d_long, d_max);
    rand_perm(perm_after_i, d_short, d_max);
    pc = alloc<double>(n * d_long);
    pc2 = alloc<double>(n * d_max);
    cpy = gpu_queue(NULL,
              copy_some_floats(d_long, d_long, 0, points, pc), n, d_long);
    rot_obs_b = alloc<gpu_thunk>(rots_before);
    rot_obs_a = alloc<gpu_thunk>(rots_after);
    for(j = 0; j < rots_before; j++)
        rot_obs_b[j] = gpu_queue({j? rot_obs_b[j - 1] : cpy, gpu_nada},
	    apply_rotation(d_long, rot_is_before + j * rot_len_before,
	                   rot_js_before + j * rot_len_before,
			   rot_as_before + j * rot_len_before, pc),
	                n, rot_len_before);
    permb = gpu_queue({rot_obs_b[rots_before - 1], gpu_nada},
             apply_permutation(d_long, d_max, perm_before, pc, pc2), n, d_max);
    wal_obs = (gpu_thunk *)NULL
    wal = walsh(d_max, n, pc2, {permb, gpu_nada}, &wal_obs);
    for(j = 0; j < rots_after; j++)
        rot_obs_a[j] = gpu_queue({j? rot_obs_a[j - 1] : wal, gpu_nada},
	    apply_rotation(d_long, rot_is_after + j * rot_len_after,
	                   rot_js_after + j * rot_len_after,
			   rot_as_after + j * rot_len_after, pc2),
	                n, rot_len_after);
    perma = gpu_queue({rot_obs_a[rots_after - 1], gpu_nada},
             apply_perm_inv(d_max, d_short, n * d_short, perm_after_i,
	                    pc2, pc),
	     n, d_max);
    signs = alloc<size_t>(n);
    sgns = gpu_queue({perma, gpu_nada},
             compute_signs(d_short, pc, signs), n);
    if(save) {
        vecs = alloc<double>(d_short * d_long + 1);
	vecs2 = alloc<double>(d_short * d_max);
	for(j = 0; j < d_short; j++)
	    for(l = 0; l < d_short; l++)
	        vecs[j * d_short + l] = l == j;
	iperma = gpu_queue(NULL,
	           apply_permutation(d_short, d_max, perm_after_i,
		                     vecs, vecs2),
			d_short, d_max);
	rot_obs_bi = alloc<gpu_thunk>(rots_before);
	rot_obs_ai = alloc<gpu_thunk>(rots_after);
	for(j = rots_after - 1; j >= 0; j--)
            rot_obs_ai[j] = gpu_queue({rots_after - j > 1? rot_obs_ai[j + 1] :
	                                                   iperma, gpu_nada},
	        apply_rotation(d_long, rot_js_after + j * rot_len_after,
	                       rot_is_after + j * rot_len_after,
			       rot_as_after + j * rot_len_after, vecs2),
	                    d_short, rot_len_after);
	iwal_obs = (gpu_thunk *)NULL;
	iwalsh = walsh(d_max, d_short, vecs2,
		       {rot_obs_ai[0], gpu_nada}, &iwal_obs);
	ipermb = gpu_queue({iwalsh, gpu_nada},
	           apply_perm_inv(d_max, d_long, d_short * d_long,
		                  perm_after_i, vecs2, vecs), d_short, d_max);
	for(j = rots_before - 1; j >= 0; j--)
            rot_obs_bi[j] = gpu_queue({rots_before - j > 1? rot_obs_bi[j + 1] :
	                                                    iperma, NULL},
	        apply_rotation(d_long, rot_js_before + j * rot_len_before,
	                       rot_is_before + j * rot_len_before,
			       rot_as_before + j * rot_len_before, vecs2),
	                    d_short, rot_len_before);
	save_vecs = gpu_queue({rot_obs_bi[0], gpu_nada},
	         copy_some_floats(d_long, d_long, 0, vecs,
		                  save->bases + i * d_short * d_long),
			d_short, d_long);
    }
    gpu_wait(sgns);
    free(pc);
    free(pc2);
    free(wal_obs);
    free(rot_obs_a);
    free(rot_obs_b);
    counts = alloc<size_t>(1 << d_short);
    for(j = 0; j < 1 << d_short; j++)
        counts[j] = 0;
    for(j = 0; j < n; j++)
	counts[signs[j]]++;
    tmax = counts[0];
    for(j = 1; j < 1 << d_short; j++)
        if(tmax < counts[j])
	    tmax = counts[j];
    which = alloc<size_t>(tmax << d_short);
    if(save) {
        save->which_par[i] = which;
	save->par_maxes[i] = tmax;
    }
    for(j = 0; j < 1 << d_short; j++)
	for(l = counts[j]; l < tmax; l++)
	    which[j * tmax + l] = n;
    for(j = 0; j < n; j++)
        which[j * tmax + --counts[signs[j]]] = j;
    which_d = alloc<size_t>((d_short + 1) * n * tmax + 1);
    dists = alloc<double>((d_short + 1) * n * tmax + 1);
    diffs = alloc<double>((d_short + 1) * n * d_long * tmax);
    cw = gpu_queue(NULL,
             compute_which(d_short, tmax, signs, which, which_d),
	     n, d_short + 1, tmax);
    cds = gpu_queue({cw, gpu_nada},
             compute_diffs_squared(d_long, (d_short + 1) * tmax, n, 0,
	                           which_d, points, points, diffs),
	     n, (d_short + 1) * tmax, d_long);
    dists_objs = (gpu_thunk *)NULL;
    cdsts = add_up_cols(d_long, (d_short + 1) * tmax, 0, n, diffs, dists,
                        {cds, gpu_nada}, &dists_objs);
    srta_o = (gpu_thunk *)NULL;
    srtb_o = (gpu_thunk *)NULL;
    srta = do_sort((d_short + 1) * tmax, n, which_d, dists,
		   {cdsts, gpu_nada}, &srta_o);
    uniq = gpu_queue({srta, gpu_nada},
               rdups((d_short + 1) * tmax, which_d, dists),
	       n, (d_short + 1) * tmax - 1);
    srtb = do_sort((d_short + 1) * tmax, n, which_d, dists,
		   {uniq, gpu_nada}, &srtb_o);
    cpi = gpu_queue({srtb, gpu_nada},
               copy_some_ints((d_short + 1) * tmax, k * tries, k * i,
	                      which_d, pointers_out),
		n, k);
    cpf = gpu_queue({srtb, gpu_nada},
               copy_some_floats((d_short + 1) * tmax, k * tries, k * i,
	                      dists, dists_out),
		n, k);
    gpu_wait(cpi);
    gpu_wait(cpf);
    if(save) {
        gpu_wait(save_vecs);
	free(vecs);
	free(vecs2);
	free(rot_obs_ai);
	free(rot_obs_bi);
	free(iwal_obs);
    } else
        free(which);
    free(rot_is_before);
    free(rot_js_before);
    free(rot_as_before);
    free(rot_is_after);
    free(rot_js_after);
    free(rot_as_after);
    free(perm_before);
    free(perm_after_i);
    free(signs);
    free(counts);
    free(which_d);
    free(dists);
    free(diffs);
    free(dists_objs);
    free(srta_o);
    free(srtb_o);
}
srta_o = (gpu_thunk *)NULL;
srta = do_sort(k * tries, n, pointers_out, dists_out, NULL, &srta_o);
uniqa = gpu_queue({srta, gpu_nada},
	   rdups(k * tries, pointers_out, dists_out), n, k * tries - 1);
srtb_o = (gpu_thunk *)NULL;
srtb = do_sort(k * tries, n, pointers_out, dists_out,
	       {uniqa, gpu_nada}, &srtb_o);
nedge = alloc<size_t>(n * k * (k + 1) + 1);
ndists = alloc<double>(n * k * (k + 1) + 1);
diffs = alloc<double>(n * k * k * d_long);
sup = gpu_queue({srtb, gpu_nada},
          supercharge(n, k * tries, k, pointers_out, pointers_out, nedge),
	  n, k, k);
csi = gpu_queue({srtb, gpu_nada},
          copy_some_ints(k * tries, k * (k + 1), 0, pointers_out, nedge),
	  n, k);
csf = gpu_queue({srtb, gpu_nada},
          copy_some_floats(k * tries, k * (k + 1), 0, dists_out, ndists),
	  n, k);
cds = gpu_queue({sup, gpu_nada},
         compute_diffs_squared(d_long, k * (k + 1), n, k,
	                       nedge, points, points, diffs),
	 n, k * k, d_long);
dist_objs = (gpu_thunk *)NULL;
ac = add_up_cols(d, k * (k + 1), k, n, diffs, ndists,
		 {cds, gpu_nada}, &dist_objs);
srtc_o = (gpu_thunk *)NULL;
srtc = do_sort(k * (k + 1), n, nedge, ndists,
	       {ac, csi, csf, gpu_nada}, &srtc_o);
uniqb = gpu_queue({srtc, gpu_nada},
	   rdups(k * (k + 1), nedge, ndists), n, k * (k + 1) - 1);
srtd_o = (gpu_thunk *)NULL;
srtd = do_sort(k * (k + 1), n, nedge, ndists, {uniqb, gpu_nada}, &srtd_o);
fedges = alloc<size_t>(n * k);
if(save)
   save->graph = fedges;
cbk = gpu_queue({srtd, gpu_nada},
          copy_some_ints(k * (k + 1), k, 0, nedge, fedges), n, k);
gpu_wait(cbk);
free(nedge);
free(ndists);
free(diffs);
free(pointers_out);
free(dists_out);
free(dist_objs);
free(sorta_o);
free(sortb_o);
free(sortc_o);
free(sortd_o);
return(fedges);

// We now have save->points (n by d_long), save->graph (n by k),
// save->row_means (d_long), save->par_maxes (tries),
// save->which_par (tries, then 1 << d_short by save->par_maxes[i]),
// save->bases (tries by d_short by d_long), y (ycnt by d_long).

cprds = alloc<double>(save->tries * save->d_short * save->d_long);
dprds = alloc<double>(save->tries * save->d_short);
csbt = gpu_queue(NULL,
           subtract_off(save->d_long, y, save->row_means), ycnt, save->d_long);
ccpr = gpu_queue({csbt, gpu_nada},
                 prods(save->d_long, save->n, y, save->bases, cprds),
                 ycnt, save->tries * save->d_short, save->d_long);
cdpr_o = (gpu_thunk *)NULL;
cdpr = add_up_cols(save->d_long, save->d_short, 0, save->tries * ycnt,
		   cprds, dprds, {ccpr, gpu_nada}, &cdpr_o);
pmaxes = alloc<size_t>(save->tries);
msofar = 0;
for(i = 0; i < save->tries; i++) {
    pmaxes[i] = msofar;
    msofar += save->par_maxes[i];
}
ppts = alloc<size_t>(msofar * (save->d_short + 1) * ycnt + 1);
ipts = alloc<size_t>(msofar * (save->d_short + 1) * ycnt + 1);
dpts = alloc<double>(msofar * (save->d_short + 1) * ycnt + 1);
diffs = alloc<double>(msofar * (save->d_short + 1) * save->d_long * ycnt);
ipts2 = alloc<size_t>(save->k * (save->k + 1) * ycnt);
dpts2 = alloc<double>(save->k * (save->k + 1) * ycnt);
diffs2 = alloc<double>(save->k * save->k * save->d_long * ycnt);
stiff = alloc<gpu_thunk>(save->tries);
stuff = alloc<gpu_thunk>(save->tries + 1);
stuff[save->tries] = gpu_nada;
signs = alloc<size_t>(save->tries);
thing = gpu_queue({cdpr, gpu_nada},
            compute_signs(save->d_short, dprds, signs), save->tries * ycnt);
for(i = 0; i < save->tries; i++) {
    stiff[i] =  gpu_queue({thing, gpu_nada},
                     compute_which(save->d_short, save->par_maxes[i],
		            signs + i, save->which_par[i],
			    ppts + pmaxes[i] * (save->d_short + 1) * ycnt),
		     ycnt, save->d_short + 1, save->par_maxes[i]);
    stuff[i] = gpu_queue({stiff[i], gpu_nada},
                 copy_some_ints(save->par_maxes[i] * (save->d_short + 1),
		                msofar * (save->d_short + 1),
				pmaxes[i] * (save->d_short + 1),
				ppts + pmaxes[i] * (save->d_short + 1) * ycnt,
				ipts),
		ycnt, save->par_maxes[i] * save->d_short + 1);
}
cdfs = gpu_queue(stuff,
          compute_diffs_squared(save->d_long, msofar * (save->d_short + 1),
	                        save->n, 0, ipts, y, save->points, diffs),
		ycnt, msofar * (save->d_short + 1), save->d_long);
cdst_o = (gpu_thunk *)NULL;
cdsts = add_up_cols(save->d_long, msofar * (save->d_short + 1), 0, ycnt,
		    diffs, dpts, {cdfs, gpu_nada}, &cdst_o);
srta_o = (gpu_thunk *)NULL;
srta = do_sort(msofar * (save->d_short + 1), ycnt, ipts, dpts,
	       {cdsts, gpu_nada}, &srta_o);
uniqa = gpu_queue({srta, gpu_nada},
	   rdups(msofar * (save->d_short + 1), ipts, dpts),
	   ycnt, msofar * (save->d_short + 1) - 1);
srtb_o = (gpu_thunk *)NULL;
srtb = do_sort(msofar * (save->d_short + 1), ycnt, ipts, dpts,
	       {uniqa, gpu_nada}, &srtb_o);
cp1 = gpu_queue({srtb, gpu_nada},
          copy_some_ints(save->k, save->k, 0, ipts, ipts2),
	  ycnt, save->k);
cp2 = gpu_queue({srtb, gpu_nada},
          copy_some_floats(save->k, save->k, 0, dpts, dpts2),
	  ycnt, save->k);
spr = gpu_queue({srtb, gpu_nada},
          supercharge(save->n, 0, save->k, ipts, save->graph, ipts2),
	  ycnt, save->k, save->k);
cdf2 = gpu_queue({spr, gpu_nada},
          compute_diffs_squared(save->d_long, save->k * (save->k + 1), save->n,
	                        save->k, ipts2, y, save->points, diffs2),
	  ycnt, save->k * save->k, save->d_long);
cds2_o = (gpu_thunk *)NULL;
cds2 = add_up_cols(save->d_long, save->k * (save->k + 1), save->k, ycnt,
		   diffs2, ipts2, {cdf2, gpu_nada}, &cds2_o);
srtc_o = (gpu_thunk *)NULL;
srtc = do_sort(save->k * (save->k + 1), ycnt, ipts2, dpts2,
	       {cp1, cp2, cds2, gpu_nada}, &srtc_o);
uniqb = gpu_queue({srtc, gpu_nada},
	   rdups(save->k * (save->k + 1), ipts2, dpts2),
	   ycnt, save->k * (save->k + 1) - 1);
srtd_o = (gpu_thunk *)NULL;
srtd = do_sort(save->k * (save->k + 1), ycnt, ipts2, dpts2,
	       {uniqb, gpu_nada}, &srtd_o);
results = alloc<size_t>(ycnt * save->k);
fcpy = gpu_queue({srtd, gpu_nada},
           copy_some_ints(save->k * (save->k + 1), save->k, 0, ipts2, results),
	   ycnt, save->k);
gpu_wait(fcpy);
free(ppts);
free(ipts);
free(dpts);
free(diffs);
free(ipts2);
free(dpts2);
free(diffs2);
free(stuff);
free(signs);
free(cdpr_o);
free(cdst_o);
free(cds2_o);
free(sorta_o);
free(sortb_o);
free(sortc_o);
free(sortd_o);
free(cprds);
free(dprds);
free(stiff);
return(results);
